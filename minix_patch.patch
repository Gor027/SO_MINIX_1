diff -rupN minix_source_original/minix_source/usr/include/minix/callnr.h minix_source/usr/include/minix/callnr.h
--- minix_source_original/minix_source/usr/include/minix/callnr.h	2014-09-14 13:00:44.000000000 +0400
+++ minix_source/usr/include/minix/callnr.h	2020-05-08 18:21:21.736889738 +0400
@@ -58,8 +58,10 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_CHANGE_PARENT    (PM_BASE + 48)
+#define PM_GETOPPID     (PM_BASE + 49)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		50	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN minix_source_original/minix_source/usr/include/unistd.h minix_source/usr/include/unistd.h
--- minix_source_original/minix_source/usr/include/unistd.h	2014-09-14 13:00:43.000000000 +0400
+++ minix_source/usr/include/unistd.h	2020-05-08 18:29:54.031693515 +0400
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int changeparent(void);
+pid_t getoppid(pid_t );
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN minix_source_original/minix_source/usr/src/include/unistd.h minix_source/usr/src/include/unistd.h
--- minix_source_original/minix_source/usr/src/include/unistd.h	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/include/unistd.h	2020-05-08 18:29:54.103693909 +0400
@@ -411,5 +411,8 @@ extern	 int optreset;		/* getopt(3) exte
 extern	 char *suboptarg;	/* getsubopt(3) external variable */
 #endif
 
+int changeparent(void);
+pid_t getoppid(pid_t );
+
 __END_DECLS
 #endif /* !_UNISTD_H_ */
diff -rupN minix_source_original/minix_source/usr/src/lib/libc/misc/changeparent.c minix_source/usr/src/lib/libc/misc/changeparent.c
--- minix_source_original/minix_source/usr/src/lib/libc/misc/changeparent.c	1970-01-01 04:00:00.000000000 +0400
+++ minix_source/usr/src/lib/libc/misc/changeparent.c	2020-05-08 18:42:39.636660475 +0400
@@ -0,0 +1,26 @@
+//
+// Created by gor027 on 08.05.2020.
+//
+
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+
+int get_pm_endpt(endpoint_t *pt)
+{
+    return minix_rs_lookup("pm", pt);
+}
+
+int changeparent(void) {
+    endpoint_t pm_pt;
+    message m;
+    if (get_pm_endpt(&pm_pt) != 0)
+    {
+        errno = ENOSYS;
+        return -1;
+    }
+    return (_syscall(pm_pt, PM_CHANGE_PARENT, &m));
+}
diff -rupN minix_source_original/minix_source/usr/src/lib/libc/misc/getoppid.c minix_source/usr/src/lib/libc/misc/getoppid.c
--- minix_source_original/minix_source/usr/src/lib/libc/misc/getoppid.c	1970-01-01 04:00:00.000000000 +0400
+++ minix_source/usr/src/lib/libc/misc/getoppid.c	2020-05-08 19:01:13.271420189 +0400
@@ -0,0 +1,30 @@
+//
+// Created by gor027 on 08.05.2020.
+//
+
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+
+int get_pm_endpt(endpoint_t * );
+
+pid_t getoppid(pid_t pid) {
+    endpoint_t pm_pt;
+    message m;
+    if (get_pm_endpt(&pm_pt) != 0)
+    {
+        errno = ENOSYS;
+        return -1;
+    }
+
+    m.m1_i1 = pid;
+    int result = (_syscall(pm_pt, PM_GETOPPID, &m));
+
+    if (result != 0)
+        return -1;
+    else
+        return m.m2_i1;
+}
\ No newline at end of file
diff -rupN minix_source_original/minix_source/usr/src/lib/libc/misc/Makefile.inc minix_source/usr/src/lib/libc/misc/Makefile.inc
--- minix_source_original/minix_source/usr/src/lib/libc/misc/Makefile.inc	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/lib/libc/misc/Makefile.inc	2020-05-08 18:42:39.604660264 +0400
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c changeparent.c getoppid.c
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/changeparent.c minix_source/usr/src/minix/servers/pm/changeparent.c
--- minix_source_original/minix_source/usr/src/minix/servers/pm/changeparent.c	1970-01-01 04:00:00.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/changeparent.c	2020-05-08 19:10:32.223004538 +0400
@@ -0,0 +1,24 @@
+//
+// Created by gor027 on 08.05.2020.
+//
+
+#include "pm.h"
+#include "mproc.h"
+#include "errno.h"
+
+int do_changeparent(void) {
+    int parentIndex = mp->mp_parent;
+
+    /* check if it is not init process */
+    if (mproc[parentIndex].mp_pid == INIT_PID)
+        return EACCES;
+
+    /* check if parent does not wait */
+    if (mproc[parentIndex].mp_flags & WAITING)
+        return EPERM;
+
+    int grandIndex = mproc[parentIndex].mp_parent;
+    mp->mp_parent = grandIndex;
+
+    return 0;
+}
\ No newline at end of file
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/forkexit.c minix_source/usr/src/minix/servers/pm/forkexit.c
--- minix_source_original/minix_source/usr/src/minix/servers/pm/forkexit.c	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/forkexit.c	2020-05-08 18:21:21.768889912 +0400
@@ -56,7 +56,7 @@ int do_fork()
   * way through is such a nuisance.
   */
   rmp = mp;
-  if ((procs_in_use == NR_PROCS) || 
+  if ((procs_in_use == NR_PROCS) ||
   		(procs_in_use >= NR_PROCS-LAST_FEW && rmp->mp_effuid != 0))
   {
   	printf("PM: warning, process table is full!\n");
@@ -85,6 +85,7 @@ int do_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->original_parent = mproc[who_p].mp_pid;     /* fixed original parent */
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
@@ -156,7 +157,7 @@ int do_srv_fork()
   * way through is such a nuisance.
   */
   rmp = mp;
-  if ((procs_in_use == NR_PROCS) || 
+  if ((procs_in_use == NR_PROCS) ||
   		(procs_in_use >= NR_PROCS-LAST_FEW && rmp->mp_effuid != 0))
   {
   	printf("PM: warning, process table is full!\n");
@@ -182,6 +183,7 @@ int do_srv_fork()
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
   rmc->mp_parent = who_p;			/* record child's parent */
+  rmc->original_parent = mproc[who_p].mp_pid;     /* fixed original parent */
   if (!(rmc->mp_trace_flags & TO_TRACEFORK)) {
 	rmc->mp_tracer = NO_TRACER;		/* no tracer attached */
 	rmc->mp_trace_flags = 0;
@@ -292,8 +294,8 @@ int dump_core;			/* flag indicating whet
   p_mp->mp_child_utime += user_time + rmp->mp_child_utime; /* add user time */
   p_mp->mp_child_stime += sys_time + rmp->mp_child_stime; /* add system time */
 
-  /* Tell the kernel the process is no longer runnable to prevent it from 
-   * being scheduled in between the following steps. Then tell VFS that it 
+  /* Tell the kernel the process is no longer runnable to prevent it from
+   * being scheduled in between the following steps. Then tell VFS that it
    * the process has exited and finally, clean up the process at the kernel.
    * This order is important so that VFS can tell drivers to cancel requests
    * such as copying to/ from the exiting process, before it is gone.
@@ -352,7 +354,7 @@ int dump_core;			/* flag indicating whet
   rmp->mp_flags |= EXITING;
 
   /* Keep the process around until VFS is finished with it. */
-  
+
   rmp->mp_exitstatus = (char) exit_status;
 
   /* For normal exits, try to notify the parent as soon as possible.
@@ -410,7 +412,7 @@ int dump_core;			/* flag indicating whet
 	*/
 	printf("PM: The scheduler did not want to give up "
 		"scheduling %s, ret=%d.\n", rmp->mp_name, r);
-  } 
+  }
 
   /* sched_stop is either called when the process is exiting or it is
    * being moved between schedulers. If it is being moved between
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/getoppid.c minix_source/usr/src/minix/servers/pm/getoppid.c
--- minix_source_original/minix_source/usr/src/minix/servers/pm/getoppid.c	1970-01-01 04:00:00.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/getoppid.c	2020-05-08 20:51:40.721952039 +0400
@@ -0,0 +1,28 @@
+//
+// Created by gor027 on 08.05.2020.
+//
+
+#include "pm.h"
+#include "mproc.h"
+
+int do_getoppid(void) {
+    pid_t inPid = (pid_t) m_in.m1_i1;
+    int found = 0;
+    pid_t originalParent = 0;
+
+    for (int i = 0; i < NR_PROCS; i++) {
+        if (mproc[i].mp_pid == inPid) {
+            found = 1;
+            originalParent = mproc[i].original_parent;
+            break;
+        }
+    }
+
+    if (found == 0) {
+        return EINVAL;
+    }
+
+    mp->mp_reply.m2_i1 = originalParent;
+
+    return 0;
+}
\ No newline at end of file
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/main.c minix_source/usr/src/minix/servers/pm/main.c
--- minix_source_original/minix_source/usr/src/minix/servers/pm/main.c	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/main.c	2020-05-08 18:21:21.756889847 +0400
@@ -190,6 +190,7 @@ static int sef_cb_init_fresh(int UNUSED(
   			 * that mp_parent always points to a valid slot number.
   			 */
   			rmp->mp_parent = INIT_PROC_NR;
+            rmp->original_parent = INIT_PID;     /* parent of INIT is INIT */
   			rmp->mp_procgrp = rmp->mp_pid = INIT_PID;
 			rmp->mp_flags |= IN_USE; 
 
@@ -200,6 +201,7 @@ static int sef_cb_init_fresh(int UNUSED(
 		else {					/* system process */
   			if(ip->proc_nr == RS_PROC_NR) {
   				rmp->mp_parent = INIT_PROC_NR;
+  				rmp->original_parent = INIT_PID; /* parent of RS is INIT */
   			}
   			else {
   				rmp->mp_parent = RS_PROC_NR;
@@ -226,6 +228,13 @@ static int sef_cb_init_fresh(int UNUSED(
   	}
   }
 
+  /* fixing original_parent of RS's children */
+  for (ip = &image[0]; ip < &image[NR_BOOT_PROCS]; ip++) {
+      if (ip->proc_nr != INIT_PROC_NR && ip->proc_nr != RS_PROC_NR) {
+          rmp->original_parent = mproc[RS_PROC_NR].mp_pid;
+      }
+  }
+
   /* Tell VFS that no more system processes follow and synchronize. */
   memset(&mess, 0, sizeof(mess));
   mess.m_type = VFS_PM_INIT;
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/Makefile minix_source/usr/src/minix/servers/pm/Makefile
--- minix_source_original/minix_source/usr/src/minix/servers/pm/Makefile	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/Makefile	2020-05-08 18:42:39.588660159 +0400
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c changeparent.c getoppid.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/mproc.h minix_source/usr/src/minix/servers/pm/mproc.h
--- minix_source_original/minix_source/usr/src/minix/servers/pm/mproc.h	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/mproc.h	2020-05-08 16:52:30.965067330 +0400
@@ -70,6 +70,7 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+  pid_t original_parent;
 } mproc[NR_PROCS];
 
 /* Flag values */
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/proto.h minix_source/usr/src/minix/servers/pm/proto.h
--- minix_source_original/minix_source/usr/src/minix/servers/pm/proto.h	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/proto.h	2020-05-08 18:55:47.861511464 +0400
@@ -89,3 +89,9 @@ struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* changeparent.c */
+int do_changeparent(void);
+
+/* getoppid.c */
+int do_getoppid(void);
\ No newline at end of file
diff -rupN minix_source_original/minix_source/usr/src/minix/servers/pm/table.c minix_source/usr/src/minix/servers/pm/table.c
--- minix_source_original/minix_source/usr/src/minix/servers/pm/table.c	2014-09-14 01:56:50.000000000 +0400
+++ minix_source/usr/src/minix/servers/pm/table.c	2020-05-08 18:56:19.501698332 +0400
@@ -58,5 +58,7 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_CHANGE_PARENT) = do_changeparent,
+	CALL(PM_GETOPPID) = do_getoppid
 };
